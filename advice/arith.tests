{ comments are enclosed by curly-braces;
  no nested comments are allowed  }

{ addition

  these rules work when the arguments are numerals
  but not for all arbitrary expressions

}
Add Z y => y;
Add (S x) y => S (Add x y);

{ define multiplication (Mult) here }


{ when all other computation is done }
Compute x => x;

. { end of rules }

% cat arith.tests
{ tests for arithmetic }

{ test addition on numerals }
Compute (Add (S (S Z)) (S (S Z))) -> (S (S (S (S Z))));

{ test multiplication on numerals }
Compute (Mult (S (S Z)) (S (S Z))) -> (S (S (S (S Z))));

{ test nested expressions }
Compute (Add (S Z) (Mult (S (S Z)) (S (S (S Z))))) -> (S (S (S (S (S (S (S Z)))))));
Compute (Add (Add (S (S Z)) (S Z)) (Add (S (S (S Z))) (S (S Z)))) -> (S (S (S (S (S (S (S (S Z))))))));

. { end of tests }